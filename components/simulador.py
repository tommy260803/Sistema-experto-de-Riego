from __future__ import annotations
import json
import random
from typing import Dict, List, Optional
import streamlit as st
import pandas as pd
from nucleo.base_conocimientos import PLANT_KB, PLANTS

SCENARIOS_PATH = "data/escenarios_prueba.json"
_engine: Optional['SistemaRiegoDifuso'] = None

# Escenarios requeridos por la especificaci√≥n
ESCENARIOS = {
    "‚òÄÔ∏è D√≠a Caluroso": {"temperatura": 38, "humedad_suelo": 25, "prob_lluvia": 5, "humedad_ambiental": 30, "viento": 10, "planta": "Tomate"},
    "üåßÔ∏è D√≠a Lluvioso": {"temperatura": 18, "humedad_suelo": 80, "prob_lluvia": 90, "humedad_ambiental": 85, "viento": 12, "planta": "Lechuga"},
    "üåµ Clima Seco": {"temperatura": 32, "humedad_suelo": 20, "prob_lluvia": 10, "humedad_ambiental": 25, "viento": 15, "planta": "Cactus"},
    "‚ùÑÔ∏è D√≠a Fr√≠o": {"temperatura": 10, "humedad_suelo": 60, "prob_lluvia": 30, "humedad_ambiental": 70, "viento": 8, "planta": "Rosa"},
    "üå™Ô∏è D√≠a Ventoso": {"temperatura": 25, "humedad_suelo": 40, "prob_lluvia": 20, "humedad_ambiental": 45, "viento": 50, "planta": "C√©sped"},
    "üå§Ô∏è Condiciones Ideales": {"temperatura": 22, "humedad_suelo": 55, "prob_lluvia": 20, "humedad_ambiental": 50, "viento": 10, "planta": "Fresa"},
}


def run_simulation(nombre: str) -> Dict[str, float]:
    """Funci√≥n legacy para escenarios predefinidos"""
    s = ESCENARIOS.get(nombre)
    if not s:
        return {}
    try:
        from nucleo.motor_difuso import SistemaRiegoDifuso
        engine = SistemaRiegoDifuso()
        t, f, _ = engine.calculate_irrigation(
            temperature=s["temperatura"],
            soil_humidity=s["humedad_suelo"],
            rain_probability=s["prob_lluvia"],
            air_humidity=s["humedad_ambiental"],
            wind_speed=s["viento"],
            ajuste_planta=PLANT_KB.get(s.get("planta", "Tomate"), {}).get("factor_ajuste", 1.0),
        )
        return {"tiempo_min": round(t, 2), "frecuencia": round(f, 2)}
    except Exception as e:
        st.error(f"Error en simulaci√≥n {nombre}: {e}")
        return {"tiempo_min": 15.0, "frecuencia": 2.0}


def run_simulation_custom(escenario: Dict) -> Dict[str, float]:
    """Nueva funci√≥n para escenarios personalizados"""
    try:
        from nucleo.motor_difuso import SistemaRiegoDifuso
        engine = SistemaRiegoDifuso()
        t, f, _ = engine.calculate_irrigation(
            temperature=escenario["temperatura"],
            soil_humidity=escenario["humedad_suelo"],
            rain_probability=escenario["prob_lluvia"],
            air_humidity=escenario["humedad_ambiental"],
            wind_speed=escenario["viento"],
            ajuste_planta=PLANT_KB.get(escenario.get("planta", "Tomate"), {}).get("factor_ajuste", 1.0),
        )
        return {"tiempo_min": round(t, 2), "frecuencia": round(f, 2)}
    except Exception as e:
        st.error(f"Error en c√°lculo personalizado: {e}")
        return {"tiempo_min": 15.0, "frecuencia": 2.0}


def _load_scenarios() -> List[Dict]:
    try:
        with open(SCENARIOS_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return []


def render_simulator() -> None:
    st.title("üéÆ Simulador de Escenarios")

    try:
        st.markdown("### üéØ Simulador Interactivo de Condiciones de Riego")
        st.markdown("Prueba diferentes escenarios ambientales y observa c√≥mo responde el sistema de riego inteligente.")

        # Escenario individual
        st.subheader("üå°Ô∏è Simulaci√≥n Individual")
        col1, col2 = st.columns([1, 2])

        with col1:
            st.markdown("**Configurar Escenario**")
            esc_names = list(ESCENARIOS.keys())
            nombre = st.selectbox("Seleccionar escenario predefinido", esc_names, key="scenario_select")

            st.markdown("**O configurar manualmente**")
            use_custom = st.checkbox("Usar configuraci√≥n personalizada", value=False, key="custom_scenario")

            if use_custom:
                temp_custom = st.slider("Temperatura (¬∞C)", 0, 45, 25, key="temp_custom")
                hum_suelo_custom = st.slider("Humedad Suelo (%)", 0, 100, 50, key="hum_suelo_custom")
                prob_lluvia_custom = st.slider("Prob. Lluvia (%)", 0, 100, 20, key="lluvia_custom")
                hum_aire_custom = st.slider("Humedad Aire (%)", 0, 100, 60, key="hum_aire_custom")
                viento_custom = st.slider("Velocidad Viento (km/h)", 0, 50, 15, key="viento_custom")
                planta_custom = st.selectbox("Planta", PLANTS, index=0, key="planta_custom")

                escenario_actual = {
                    "temperatura": temp_custom,
                    "humedad_suelo": hum_suelo_custom,
                    "prob_lluvia": prob_lluvia_custom,
                    "humedad_ambiental": hum_aire_custom,
                    "viento": viento_custom,
                    "planta": planta_custom
                }
            else:
                escenario_actual = ESCENARIOS[nombre]

        with col2:
            st.markdown("**Condiciones del Escenario**")
            st.json(escenario_actual)

            # Calcular resultado
            if st.button("üö∞ Calcular Riego Recomendado", key="calculate_single"):
                with st.spinner("Calculando recomendaci√≥n..."):
                    resultado = run_simulation_custom(escenario_actual)

                if resultado:
                    st.success("‚úÖ **Recomendaci√≥n Calculada**")

                    col_a, col_b = st.columns(2)
                    with col_a:
                        st.metric("‚è±Ô∏è Tiempo de Riego", f"{resultado['tiempo_min']:.1f} min")
                    with col_b:
                        st.metric("üîÑ Frecuencia Diaria", f"{resultado['frecuencia']:.2f} x/d√≠a")

                    # Interpretaci√≥n
                    tiempo_rec = resultado['tiempo_min']
                    if tiempo_rec < 10:
                        st.info("üíß **Riego ligero recomendado** - Condiciones favorables")
                    elif tiempo_rec < 20:
                        st.info("‚öñÔ∏è **Riego moderado recomendado** - Condiciones normales")
                    elif tiempo_rec < 35:
                        st.warning("üí¶ **Riego abundante recomendado** - Condiciones demandantes")
                    else:
                        st.error("üö® **Riego urgente recomendado** - Condiciones cr√≠ticas")

                    # Recomendaciones espec√≠ficas
                    with st.expander("üí° Recomendaciones Espec√≠ficas"):
                        st.markdown(f"""
                        **Planta:** {escenario_actual['planta']}
                        **Condiciones ambientales:** T={escenario_actual['temperatura']}¬∞C, H={escenario_actual['humedad_suelo']}%, V={escenario_actual['viento']}km/h

                        **Interpretaci√≥n del resultado:**
                        - Tiempo calculado: **{resultado['tiempo_min']:.1f} minutos**
                        - Frecuencia: **{resultado['frecuencia']:.2f} veces por d√≠a**
                        - **Recomendaci√≥n:** {'Regar inmediatamente' if tiempo_rec > 25 else 'Monitorear condiciones' if tiempo_rec > 15 else 'Condiciones √≥ptimas'}
                        """)

        st.divider()

        # Simulaci√≥n masiva
        st.subheader("üî¨ Simulaci√≥n Comparativa")
        col1, col2 = st.columns([1, 1])

        with col1:
            st.markdown("**üìä Ejecutar Todos los Escenarios Predefinidos**")
            st.markdown("Compara c√≥mo responde el sistema ante diferentes condiciones ambientales.")

            if st.button("üéØ Ejecutar Simulaci√≥n Completa", key="run_all_scenarios"):
                with st.spinner("Simulando todos los escenarios..."):
                    rows = []
                    for nombre_sc, escenario_data in ESCENARIOS.items():
                        resultado = run_simulation_custom(escenario_data)
                        if resultado:
                            rows.append({
                                "Escenario": nombre_sc,
                                "Planta": escenario_data["planta"],
                                "Temp(¬∞C)": escenario_data["temperatura"],
                                "HumSuelo(%)": escenario_data["humedad_suelo"],
                                "Tiempo(min)": ".1f",
                                "Frecuencia": ".2f",
                                "Prioridad": "Alta" if resultado['tiempo_min'] > 25 else "Media" if resultado['tiempo_min'] > 15 else "Baja"
                            })

                    if rows:
                        df_resultados = pd.DataFrame(rows)
                        st.success("‚úÖ **Simulaci√≥n completada exitosamente**")

                        # Mostrar tabla ordenada
                        st.dataframe(df_resultados.sort_values("Tiempo(min)", ascending=False), use_container_width=True)

                        # Estad√≠sticas resumen
                        st.markdown("#### üìä Resumen Estad√≠stico")
                        col_stats1, col_stats2, col_stats3 = st.columns(3)
                        with col_stats1:
                            st.metric("Promedio Tiempo", ".1f")
                        with col_stats2:
                            st.metric("M√°ximo Tiempo", ".1f")
                        with col_stats3:
                            st.metric("Escenarios Simulados", len(rows))
                    else:
                        st.error("‚ùå Error en la simulaci√≥n")

        with col2:
            st.markdown("**üé≤ Modo Desaf√≠o Interactivo**")
            st.markdown("¬°Pon a prueba tu intuici√≥n agr√≠cola!")

            if "current_challenge" not in st.session_state:
                st.session_state.current_challenge = random.choice(list(ESCENARIOS.items())) if ESCENARIOS else None

            if st.button("üéØ Nuevo Desaf√≠o", key="new_challenge"):
                st.session_state.current_challenge = random.choice(list(ESCENARIOS.items())) if ESCENARIOS else None

            challenge = st.session_state.get("current_challenge")
            if challenge:
                nombre_ch, data_ch = challenge

                # Mostrar condiciones sin la respuesta
                st.markdown(f"**Escenario:** {nombre_ch}")
                condiciones_display = {
                    "üå°Ô∏è Temperatura": f"{data_ch['temperatura']} ¬∞C",
                    "üíß Humedad del suelo": ".0f",
                    "üåßÔ∏è Probabilidad de lluvia": ".0f",
                    "üí® Humedad del aire": ".0f",
                    "üå™Ô∏è Velocidad del viento": ".0f",
                    "üå± Planta": data_ch.get("planta", "Tomate")
                }
                st.json(condiciones_display)

                # Input del usuario
                st.markdown("**Tu estimaci√≥n:**")
                user_guess = st.slider("¬øCu√°ntos minutos de riego recomendar√≠as?", 0.0, 60.0, 15.0, key="user_guess")

                if st.button("üî• Revelar Resultado", key="reveal_challenge"):
                    with st.spinner("Calculando..."):
                        real_result = run_simulation_custom(data_ch)

                    if real_result:
                        real_time = real_result['tiempo_min']
                        diferencia = abs(real_time - user_guess)

                        if diferencia < 5:
                            st.success(f"üéâ **¬°Excelente intuici√≥n!** Diferencia: {diferencia:.1f} min")
                            st.balloons()
                        elif diferencia < 10:
                            st.info(f"üëç **Buen estimaci√≥n!** Diferencia: {diferencia:.1f} min")
                        else:
                            st.warning(f"ü§î **Estimaci√≥n conservadora** Diferencia: {diferencia:.1f} min")

                        col_res1, col_res2 = st.columns(2)
                        with col_res1:
                            st.metric("Tu Estimaci√≥n", f"{user_guess:.1f} min")
                        with col_res2:
                            st.metric("Sistema Recomienda", ".1f")
                    else:
                        st.error("‚ùå Error en el c√°lculo del desaf√≠o")
            else:
                st.info("üéØ Haz clic en 'Nuevo Desaf√≠o' para comenzar")

        st.divider()

        # Informaci√≥n adicional
        st.subheader("üìñ Informaci√≥n del Sistema de Simulaci√≥n")
        with st.expander("‚ÑπÔ∏è C√≥mo funciona la simulaci√≥n"):
            st.markdown("""
            **Simulador de Escenarios** permite probar el sistema de riego inteligente bajo diferentes condiciones:

            **üëÜ Escenario Individual:**
            - Selecciona un escenario predefinido o configura uno personalizado
            - Observa la respuesta del sistema ante condiciones espec√≠ficas
            - Recibe recomendaciones interpretadas autom√°ticamente

            **üî¨ Simulaci√≥n Comparativa:**
            - Ejecuta simulaciones para todos los escenarios predefinidos simult√°neamente
            - Compara el rendimiento del sistema ante diferentes condiciones
            - Obtiene estad√≠sticas resumen del comportamiento general

            **üé≤ Modo Desaf√≠o:**
            - Prueba tus conocimientos intuitivos de riego agr√≠cola
            - Compite contra el sistema experto
            - Aprende mediante la comparaci√≥n con recomendaciones √≥ptimas

            **Beneficios:**
            - üß† Aprende c√≥mo funcionan las variables ambientales
            - üéØ Mejora la toma de decisiones agricultura
            - üìä Entiende la l√≥gica difusa en acci√≥n
            """)

    except Exception as e:
        st.error(f"‚ùå Error en el simulador: {e}")
        import traceback
        st.code(f"Traceback completo:\n{traceback.format_exc()}")
